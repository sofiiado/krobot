1. Opis projektu
Moim tematem projektu jest stworzenie bota Telegram do gry "Krokodyl", którego można dodać do grupowego czatu. Gra polega na wyjaśnianiu wylosowanych słów bez użycia ich nazwy, a pozostali uczestnicy zgadują, o jakie słowo chodzi. Bot będzie losował słowa do odgadnięcia, rejestrował odpowiedzi graczy i przyznawał punkty za poprawne odpowiedzi. Pierwszego prowadzącego wybiera bot losowo, a kolejnym prowadząсym staje grać który zgadnie słowo. Ta gra pomoże mi w mojej pracy, ponieważ pracuję z uczniami, którzy przygotowują się do egzaminu z historii, gra pomoże im lepiej zapamiętać materiał, powtarzać go od czasu do czasu. Najpierw zrobię projekt po polsku, a potem przetłumaczę go na ukraiński, a słowa będą dotyczyły tematów historycznych.

Zakres projektu:

-Stworzenie bota za pomocą języka Python.

-Możliwość dodania bota do grupowego czatu.

-Funkcja rejestrowania wyników graczy.

-Losowanie prowadzącego i słów do odgadnięcia.

-Automatyczne śledzenie wyników i punktacji.

-Możliwość rozpoczęcia nowej gry przez komendę.



Oczekiwane rezultaty:

-Działający bot, który można dodać do dowolnej grupy na Telegramie.

-Udana gra bez błędów

 

2. Analiza wymagań

W ramach analizy wymagań projektu uwzględniłam następujące elementy:

Podstawy Python:
Projekt opiera się na języku Python, dlatego wykorzystuję jego podstawowe konstrukcje, takie jak zmienne, pętle, instrukcje warunkowe oraz funkcje.

Środowiska programistyczne dla Python:
Pracowałam głównie w środowisku Visual Studio Code, co umożliwiło mi wygodną pracę nad kodem oraz łatwe zarządzanie projektem.

Podstawowe struktury danych Pythona:
W projekcie używam list, krotek (tuple), zbiorów (set) oraz słowników (dict) do przechowywania informacji – między innymi listy haseł do odgadnięcia oraz słownika do rejestrowania punktacji graczy.

Klasy, metaklasy, wyszukiwanie atrybutów w obiektach i klasach:
Kluczowe elementy logiki gry zostały zaimplementowane z wykorzystaniem programowania obiektowego. Zdefiniowałam klasy reprezentujące graczy oraz mechanizmy zarządzania stanem gry, co umożliwia przejrzystą strukturę kodu oraz łatwe wyszukiwanie i modyfikowanie atrybutów.

Deskryptory, dekoratory:
Aby zwiększyć czytelność i modularność kodu, wykorzystałam dekoratory do walidacji danych wejściowych oraz do logowania działań aplikacji. Dzięki temu kod stał się bardziej przejrzysty, co ułatwia debugowanie i dalszą rozbudowę funkcjonalności.


3.Projekt i implementacja

Dostarczone pliki:

 -Plik główny – kro.py - zawiera kod projektu
 -Plik testowy – test_kro.py - zawiera zestaw testów jednostkowych napisanych z użyciem pytest.
Testy sprawdzają poprawność działania kluczowych funkcji, takich jak inicjalizacja gry, przypisywanie punktów oraz obsługa komend.
 -Project.txt - opis projectu,analiza i td. 
 -testsuccess.png - screen wyników przeprowadzonego testu pytest
 -botwtg.png - screen tego jak wygląda bot w telegramie oraz jak działa z użytkownikiem.


W projekcie zaimportowałam następujące moduły:

telebot

Używam modułu telebot do tworzenia i obsługi bota na platformie Telegram. Dzięki niemu mogę łatwo komunikować się z Telegram API, odbierać wiadomości od użytkowników, przetwarzać komendy oraz wysyłać odpowiedzi.
https://pytba.readthedocs.io/en/latest/
https://pytba.readthedocs.io/_/downloads/en/latest/pdf/
https://www.youtube.com/watch?v=NwBWW8cNCP4
https://www.youtube.com/watch?v=axGHFAHlJP8&list=PLmSBSL0-aSglhQu_apL_4GM8VbUKuL2J_

random

Moduł random służy do generowania losowych wartości.
W projekcie wykorzystuję random do losowego wyboru słowa z przygotowanej listy (words_pool) oraz do losowego przypisania roli prowadzącego spośród dostępnych graczy. Dzięki temu gra staje się nieprzewidywalna i bardziej dynamiczna.
https://www.geeksforgeeks.org/python-random-module/


logging

Moduł logging umożliwia rejestrowanie zdarzeń w aplikacji.
Dzięki logging mogę monitorować działanie bota, zapisywać informacje o przebiegu gry oraz debugować kod w przypadku wystąpienia błędów.
https://realpython.com/python-logging/
https://www.geeksforgeeks.org/logging-in-python/
https://www.youtube.com/watch?v=pxuXaaT1u3k

pytest

W projekcie wykorzystuję pytest do tworzenia i uruchamiania testów, które sprawdzają poprawność działania poszczególnych funkcji bota, np. obsługi komend, przypisywania punktów czy zmiany prowadzącego. Testy pomagają zapewnić stabilność i poprawność implementacji w kodzie.
https://www.jetbrains.com/help/pycharm/pytest.html#pytest-parametrize
https://www.youtube.com/watch?v=cHYq1MRoyI0

Aby stworzyć bota, należy również uzyskać token w Telegramie. Token ten jest unikalnym kluczem, który pozwala na autoryzację bota oraz umożliwia komunikację z Telegram Bot API. Aby go otrzymać, wystarczy rozpocząć rozmowę z @BotFather w Telegramie, wysłać komendę /newbot i postępować zgodnie z instrukcjami.

4. Testowanie 

Wszystkie testy zostały pomyślnie przeprowadzone, co potwierdziło stabilność i poprawność działania systemu. Przy uruchomieniu testów za pomocą polecenia pytest uzyskałam następujące rezultaty:

-wszystkie przypadki testowe zakończyły się sukcesem, co świadczy o prawidłowej implementacji logiki gry.
-pełny cykl gry (od uruchomienia do wyświetlenia rankingu) przebiegł zgodnie z oczekiwaniami.
-system poprawnie reagował na nietypowe sytuacje, wyświetlając odpowiednie komunikaty błędów lub ostrzeżenia.

Screen wyników przeprowadzonego testu pytest został dołączony w pliku testsuccess.png

Podsumowując, przeprowadzone testy wykazały, że bot działa efektywnie i spełnia wszystkie założone wymagania. 
@krokodylczyk_bot


